CC = gcc
CXX = g++
AR = ar

ARCHOPTS = -m32 -march=core2 -mfpmath=sse -mtune=native
ARCHOPTS += -fopenmp
COPTS = -Wall -Wextra -Wno-parentheses -Wno-unused -Wno-unknown-pragmas

ifdef DEBUG
	COPTS += -ggdb3
else
	COPTS += -O2 -funroll-loops -fomit-frame-pointer
	COPTS += -fno-math-errno -funsafe-math-optimizations
	# LDOPTS = -s  # Seems to be deprecated on Mac these days
endif

CXXOPTS = $(COPTS)
CFLAGS = $(ARCHOPTS) $(INCLUDES) $(DEFINES) $(COPTS)
CXXFLAGS = $(ARCHOPTS) $(INCLUDES) $(DEFINES) $(CXXOPTS) -DDARWIN
LDFLAGS = $(LIBDIR) $(LDOPTS) -multiply_defined suppress

DONT_BUILD_FREEGLUT = y

LIBS = -lm -lobjc
GLLIBS = -framework GLUT -framework OpenGL -lgluit
CHOLMODLIBS = -lcholmod -lamd -lcolamd -lccolamd -lcamd -lmetis -framework Accelerate


$(OBJDIR)/%.o: %.c
	@ echo "Compiling $<"
	@ rm -f "$(@:.o=.d)" && env DEPENDENCIES_OUTPUT="$(@:.o=.d) $@" $(CC) $(CFLAGS) -c $< -o $@

$(OBJDIR)/%.o: %.cc
	@ echo "Compiling $<"
	@ rm -f "$(@:.o=.d)" && env DEPENDENCIES_OUTPUT="$(@:.o=.d) $@" $(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJDIR)/%.o: %.cpp
	@ echo "Compiling $<"
	@ rm -f "$(@:.o=.d)" && env DEPENDENCIES_OUTPUT="$(@:.o=.d) $@" $(CXX) $(CXXFLAGS) -c $< -o $@


define LINK
	@ echo "Linking $@"
	@ rm -f $@
	@ $(CXX) $(CXXFLAGS) $^ $(LDFLAGS) $(LIBS) -o $@
endef

define STATICLIB
	@ echo "Creating library $@"
	@ rm -f $@
	@ $(AR) -rcs $@ $^
endef

define SHAREDLIB
	@ echo "Creating library $@"
	@ rm -f $@
	@ $(CXX) $(CXXFLAGS) -shared $^ -o $@
endef


-include $(OBJDIR)/*.d

